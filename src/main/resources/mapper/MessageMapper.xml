<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.yumuing.community.mapper.MessageMapper">

    <resultMap id="BaseResultMap" type="top.yumuing.community.entity.Message">
            <id property="id" column="id" jdbcType="INTEGER"/>
            <result property="fromId" column="from_id" jdbcType="INTEGER"/>
            <result property="toId" column="to_id" jdbcType="INTEGER"/>
            <result property="conversationId" column="conversation_id" jdbcType="VARCHAR"/>
            <result property="content" column="content" jdbcType="VARCHAR"/>
            <result property="status" column="status" jdbcType="INTEGER"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,from_id,to_id,
        conversation_id,content,status,
        create_time
    </sql>
    <select id="countById" resultType="int">
        select count(m.maxid)
        from(
            select max(id) as maxid
            from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        )as m
    </select>

    <select id="selectConversations" resultType="Message">
        select <include refid="Base_Column_List"></include>
        from message
        where id in (
            select max(id)
            from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        )
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectLetters" resultType="Message">
        select <include refid="Base_Column_List"></include>
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <select id="selectLetterCount" resultType="int">
        select count(id)
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
    </select>

    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where status = 0
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId!=null">
            and conversation_id = #{conversationId}
        </if>
    </select>
    <insert id="insertAll" keyProperty="id">
        insert into message
        (id, from_id, to_id,
         conversation_id, content, status,
         create_time)
        values (#{id,jdbcType=NUMERIC}, #{fromId,jdbcType=NUMERIC}, #{toId,jdbcType=NUMERIC},
                #{conversationId,jdbcType=VARCHAR}, #{content,jdbcType=VARCHAR}, #{status,jdbcType=NUMERIC},
                #{createTime,jdbcType=TIMESTAMP})

    </insert>

    <update id="updateStatusByIds" >
        update message
        set status = #{status}
        where id in
        <foreach collection="idList" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>
</mapper>
